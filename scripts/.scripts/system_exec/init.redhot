#!/usr/bin/env sh

RHCloseTerm(){
    xdotool windowclose $window 
}

RHQueryAllFiles(){
    echo "path,score,time" > "${C_BDFR}"/tmp.csv
    fd --full-path "${C_BDFR}" --extension=mp4 ${C_BDFR}/fav -x \
    jq --arg e {} -r '. |= . + {"$e": "$e"} | [$e, .score, .created_utc] | @csv' {.}.json 2>/dev/null | tee --append ${C_BDFR}/tmp.csv
    
    # append human readable date
    echo "hrTime" > ${C_BDFR}/dates.csv             
    while IFS= read -r line;
    do
        date +%Y%m%dT%H%M%S --date=@$line
    done < <((cat ${C_BDFR}/tmp.csv|cut -d "," -f 3)) >> ${C_BDFR}/dates.csv

    cat "${C_BDFR}/dates.csv" | csvjoin "${C_BDFR}/tmp.csv" - > ${C_BDFR}/RH.csv
    sed 's/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9],//g' -i ${C_BDFR}/RH.csv
    rm ${C_BDFR}/tmp.csv
    cat ${C_BDFR}/RH.csv
}

RHQuerySub(){
        sub=$1
        sort=$2
        csvgrep -c 1 -r ".$sub" ${C_BDFR}/RH.csv | csvsort -c "$sort" -r | csvcut -c 1
}

RHDownload(){
    time='all'
    srt='top'
    subreddit=$1
    python3 -m bdfr clone ${C_BDFR}/fav \
    -s "$subreddit" \
    -t $time \
    -S $srt \
    --file-scheme '{POSTID}' \
    --search-existing \
    --no-dupes
}

RHsearch(){
        folder="$(echo "$query" | sed 's/ //g')"

        python3 -m bdfr clone ${C_BDFR}/search/$folder \
        --subreddit "all" \
        --sort "top" \
        --time "all" \
        --user "DontWorryAboutIt88"\
        --authenticate \
        --file-scheme '{POSTID}' \
        --search "'$query'" 
}

RHSearchLocal(){
    fd --search-path ${C_BDFR}/fav --extension json $1 -x cat {} | jq
}


RHGetMPVPostInfo(){
    
    ShowMPVProperties(){
        for i in $(ls /tmp/mpvSockets/*); do
            echo '{ "command": ["get_property", "path"] }' | socat - "$i"; 
        done | jq

    }

    vid=($(ShowMPVProperties | grep -oe "/.*\.mp4" | sed 's/mp4/json/g'))
    for j in ${vid[@]};
    do
        find $j 2>/dev/null
    done

}

RHMPVNotify(){
    notify-send.sh $(jq -r .title $(Get_MPV_Post_Info)) 
    notify-send.sh $(jq -r '.comments[0].subreddit' $(Get_MPV_Post_Info))
    notify-send.sh $(jq -r .score $(Get_MPV_Post_Info))
}

RHgetTopFifty(){
    monthFile="$C_BDFR/month.txt"        
   
    get_TopFiftyFromSubs(){
       subs=($(find "$C_BDFR"/fav/ -maxdepth 1 | cut -d "/" -f 8))
       for s in "${subs[@]}";
       do                                                                                          
           cat $C_BDFR/RH.csv | grep -e "$s" | csvsort -c 2 -r | csvcut -c 1 | head -n 50 | tee -a "$monthFile"
       done                                                       
    }

    if [[ ! -f "$monthFile" ]]; then
        echo "$monthFile does not Exist, generating new Month file"                                                
        sleep 2
        get_TopFiftyFromSubs
                        
    fi                                                         

    nohup mpv $(cat "$monthFile") &> /tmp/month.txt.out &!
}

RHGenerate_Model_List(){

    fd . --full-path --extension=json $C_BDFR/fav/BoutinelaBabes -X \
        jq -s '[ .[] | {score: .score, title: .title} ] | sort_by(.score)' | \
        grep -e "title" | \
        sed 's/(and\|&)/\n/g' | \
        tr -s ' ' |  cut -d ' ' -f 3-4 | \
        grep -e "^\"[A-Z].* [A-Z].*$" | \
        sed 's/\("\|,\|$\)/"/g' | \
        sort | uniq --repeated

}

RHRead_Model_List(){
    
    models=($($RHGenerate_Model_List))

    while PS1= read -r line;
    do

        redhot -S "$line"

    done < <((echo "${models[@]}" | sed 's/" "/\n/g'))

}

RHget_RedHotJson(){
    
    cd "${C_BDFR}"
    search=("${@}")

    fd . --full-path --extension=mp4 "${search[@]}" -x jq -s \
    '[ .[] | { title: .title, score: .score, sub: .comments[].subreddit } ] | sort_by(.score)' \
    "{.}.json" 2>/dev/null | rg "(title|score|sub)"
 
}

RHredhotInfo(){
    eval $(C_TMP)
    i=1

    jq -r '.title, .permalink' $(Get_MPV_Post_Info) >> "$C_TMPFILE"

    while [[ $i -lt 2 ]];
    do

        jq -r .title $(Get_MPV_Post_Info) >> "$C_TMPFILE"
        current=$(cat $C_TMPFILE | tail -n2)
        prev=$(cat $C_TMPFILE | tail -n4 | head -n2)

        if [ $current = $prev ]; then     
            sleep .5
        else
            echo "$current"
       fi

    done
}

redhotTimeFilter(){   

    currentMonth=$(date +%m)
    lastMonth=$(echo "0$(bc <<<$currentMonth-01)")
    day=$(date +%d)

    sub="$1"

    cat "${C_BDFR}/RH.csv" |\
    rg "2022-$month" |\
    rg "$sub" |\
    rg -o ".*mp4"
 
}

getTopAllSubs(){                           

    cachePath="${C_BDFR}/cache"
    subs=($(find "$C_BDFR"/fav/ -maxdepth 1 | cut -d "/" -f 8))
    limit=$1
    collection=()

    for s in "${subs[@]}";
    do
        cacheName="top$limit-byMonth-$s.txt"
        output="$cachePath/$cacheName"
        if [[ ! -f "$output" ]]; then
            cat $C_BDFR/RH.csv | grep -e "$s" | \
                csvsort -c 2 -r | csvcut -c 1 | \
                head -n $limit | \
                tee $output
        fi
        collection+="$output"
    done

    if [[ $2 = '--play' ]]; then
        folders=($(find "${C_BDFR}/fav" -type d | cut -d '/' -f 8))
        selection=$(gum choose $folders)
        playlist="$cachePath/top50-byMonth-$selection.txt"
        nohup mpv \
            --playlist="$playlist" \
            --playlist-start=0 \
            &> "${C_TMP}"/mpv.out &!
    fi

}
